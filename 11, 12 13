11.Simulate simple ESS and with transmitting nodes in wireless LAN by simulation and 
determine the performance with respect to transmission of packets.

Aim: Implement simple ESS and with transmitting nodes in wire-less LAN by simulation 
and determine the performance with respect to transmission of packets. 

#Create a ns simulator
set ns [new Simulator]
#Setup topography object
set topo [new Topography]
$topo load_flatgrid 1500 1500
#Open the NS trace file
set tracefile [open p4.tr w]
$ns trace-all $tracefile
#Open the NAM trace file
set namfile [open p4.nam w]
$ns namtrace-all $namfile
$ns namtrace-all-wireless $namfile 1500 1500
#===================================
#Mobile node parameter setup
#===================================
$ns node-config -adhocRouting DSDV \
-llType LL \
-macType Mac/802_11 \
-ifqType Queue/DropTail \
-ifqLen 20 \
-phyType Phy/WirelessPhy \
-channelType Channel/WirelessChannel \
-propType Propagation/TwoRayGround \
-antType Antenna/OmniAntenna \
-topoInstance $topo \
-agentTrace ON \
-routerTrace ON
#===================================
#Nodes Definition
#===================================
create-god 6
#Create 6 nodes
set n0 [$ns node]
$n0 set X_ 630
$n0 set Y_ 501
$n0 set Z_ 0.0
$ns initial_node_pos $n0 20
set n1 [$ns node]
$n1 set X_ 454
$n1 set Y_ 340
$n1 set Z_ 0.0
$ns initial_node_pos $n1 20
set n2 [$ns node]
$n2 set X_ 785
$n2 set Y_ 326
$n2 set Z_ 0.0
$ns initial_node_pos $n2 20
set n3 [$ns node]
$n3 set X_ 270
$n3 set Y_ 190
$n3 set Z_ 0.0
$ns initial_node_pos $n3 20
set n4 [$ns node]
$n4 set X_ 539
$n4 set Y_ 131
$n4 set Z_ 0.0
$ns initial_node_pos $n4 20
set n5 [$ns node]
$n5 set X_ 964
$n5 set Y_ 177
$n5 set Z_ 0.0
$ns initial_node_pos $n5 20
#===================================
#Agents Definition
#===================================
#Setup a UDP connection
set udp0 [new Agent/UDP]
$ns attach-agent $n0 $udp0
set null1 [new Agent/Null]
$ns attach-agent $n4 $null1
$ns connect $udp0 $null1
$udp0 set packetSize_ 1500

#Setup a TCP connection
set tcp0 [new Agent/TCP]
$ns attach-agent $n3 $tcp0
set sink1 [new Agent/TCPSink]
$ns attach-agent $n5 $sink1
$ns connect $tcp0 $sink1
#===================================
#Applications Definition
#===================================
#Setup a CBR Application over UDP connection
set cbr0 [new Application/Traffic/CBR]
$cbr0 attach-agent $udp0
$cbr0 set packetSize_ 1000
$cbr0 set rate_ 1.0Mb
$cbr0 set random_ null
#Setup a FTP Application over TCP connection
set ftp0 [new Application/FTP]
$ftp0 attach-agent $tcp0

#Termination
#===================================
#Define a 'finish' procedure
proc finish {} {
global ns tracefile namfile
$ns flush-trace
close $tracefile
close $namfile
exec nam p4.nam &
exec echo "Number of packets dropped is:" &
exec grep -c "^D" p4.tr &
exit 0
}
$ns at 1.0 "$cbr0 start"
$ns at 2.0 "$ftp0 start"
$ns at 180.0 "$ftp0 stop"
$ns at 200.0 "$cbr0 stop"
$ns at 200.0 "finish"
$ns at 70 "$n4 set dest 100 60 20"
$ns at 100 "$n4 set dest 700 300 20"
$ns at 150 "$n4 set dest 900 200 20"
$ns run



#===================================
#CODE TO BE SAVED AS .awk FILE
#===================================
BEGIN{
count1=0
count2=0
pack1=0
pack2=0
time1=0
time2=0
}
{
if($1=="r"&&$3=="_1_"&&$4=="RTR")
{
count1++
pack1=pack1+$8
time1=$2
}
if($1=="r"&&$3=="_2_"&&$4=="RTR")
{
count2++
pack2=pack2+$8
time2=$2
}
}
END{
printf("The Throughput from n0 to n1: %fMbps\n",((count1*pack1*8)/(time1*1000000)));
printf("The Throughput from n1 to n2: %fMbps\n",((count2*pack2*8)/(time2*1000000)));
}



























12.Simulate and study the performance of GSM on NS2/NS3 (Using MAC layer) or 
equivalent environment.
AIM: Implement and study the performance of GSM on NS2/NS3 (Using MAC layer) or 
equivalent environment. 
Second Generation (2G) technology is based on the technology known as global system for 
mobile communication (GSM). This technology enabled various networks to provide services 
like text messages, picture messages and MMS. The technologies used in 2G are either 
TDMA (Time Division Multiple Access) which divides signal into different time slots or 
CDMA (Code Division Multiple Access) which allocates a special code to each user so as to 
communicate over a multiplex physical channel. 
GSM uses a variation of time division multiple access (TDMA). 2G networks developed as a 
replacement for first generation (1G) analog cellular networks, and the GSM standard 
originally described as a digital, circuit-switched network optimized for full duplex voice 
telephony. This expanded over time to include data communications, first by circuit-switched 
transport, then by packet data transport via GPRS (General Packet Radio Services). 
GSM can be implemented on all the versions of NS2 (Since year 2004: ns-2.27, and later 
versions of NS2) 



#set Parameters 
set stop 100 ;# Stop time. 
# Topology 
set type gsm ;#type of link: 
# AQM parameters 
set minth 30
set maxth 0
set adaptive 1 ;# 1 for Adaptive RED, 0 for plain RED 
# Traffic generation. 
set flows 0 ;# number of long-lived TCP flows 
set window 30 ;# window for long-lived traffic 
# Plotting statistics. 
set opt(wrap) 100 ; # wrap plots? 
set opt(srcTrace) is ;# where to plot traffic 
set opt(dstTrace) bs2 ;# where to plot traffic 
#default downlink bandwidth in bps 
set bwDL(gsm) 9600 
#default downlink propagation delay in seconds 
set propDL(gsm) .500 
set ns [new Simulator] 
set tf [open Mlab5.tr w] 
$ns trace-all $tf 
set nodes(is) [$ns node] 
set nodes(ms) [$ns node]
set nodes(bs1) [$ns node] 
set nodes(bs2) [$ns node] 
set nodes(lp) [$ns node] 
proc cell_topo {} { 
 global ns nodes 
 $ns duplex-link $nodes(lp) $nodes(bs1) 3Mbps 10ms DropTail 
 $ns duplex-link $nodes(bs1) $nodes(ms) 1 1 RED 
 $ns duplex-link $nodes(ms) $nodes(bs2) 1 1 RED 
 $ns duplex-link $nodes(bs2) $nodes(is) 3Mbps 50ms DropTail 
 puts "GSM Cell Topology" 
 } 
proc set_link_params {t} { 
global ns nodes bwDL propDL
$ns bandwidth $nodes(bs1) $nodes(ms) $bwDL($t) duplex 
$ns bandwidth $nodes(bs2) $nodes(ms) $bwDL($t) duplex 
$ns delay $nodes(bs1) $nodes(ms) $propDL($t) duplex 
$ns delay $nodes(bs2) $nodes(ms) $propDL($t) duplex 
$ns queue-limit $nodes(bs1) $nodes(ms) 10 
$ns queue-limit $nodes(bs2) $nodes(ms) 10 
}

# RED and TCP parameter 
 Queue/RED set adaptive_ $adaptive 
 Queue/RED set thresh_ $minth 
 Queue/RED set maxthresh_ $maxth 
 Agent/TCP set window_ $window 
#Create topology 
 switch $type { 
 gsm {cell_topo} 
 } 
set_link_params $type 
$ns insert-delayer $nodes(ms) $nodes(bs1) [new Delayer] 
$ns insert-delayer $nodes(ms) $nodes(bs2) [new Delayer] 
 # Set up forward TCP connection 
 if {$flows == 0} { 
 set tcp1 [$ns create-connection TCP/Sack1 $nodes(is) TCPSink/Sack1 nodes(lp) 0] 
set ftp1 [[set tcp1] attach-app FTP] 
 $ns at 0.8 "[set ftp1] start" 
} 
 proc stop {} { 
 global nodes opt tf 
set wrap $opt(wrap) 
 set sid [$nodes($opt(srcTrace)) id] 
 set did [$nodes($opt(dstTrace)) id] 

set a "Mlab5.tr" 
 
 set GETRC "/var/cn/ns-allinone-2.35/ns-2.35/bin/getrc" 
 set RAW2XG "/var/cn/ns-allinone-2.35/ns-2.35/bin/raw2xg" 
 
 exec $GETRC -s $sid -d $did -f 0 Mlab5.tr | \
 $RAW2XG -s 0.01 -m $wrap -r > plot.xgr 
 
 exec $GETRC -s $did -d $sid -f 0 Mlab5.tr | \
 $RAW2XG -a -s 0.01 -m $wrap >> plot.xgr 
 
 exec xgraph -x time -y packets plot.xgr &
 exit 0
 } 
 $ns at $stop "stop"
 $ns run
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


13.Simulate and study the performance of CDMA on NS2/NS3 (Using stack called Call net) 
or equivalent environment

#set parameters 
 set stop 100 ;# Stop time. 
 
 # Topology 
 set type umts ;#type of link 
# AQM parameters 
 set minth 30 
 set maxth 0 
 set adaptive 1 ;# 1 for Adaptive RED, 0 for plain RED 
 
 
 # Traffic generation. 
 set flows 0 ;# number of long-lived TCP flows 
 set window 30 ;# window for long-lived traffic 
 
 # Plotting statics. 
 set opt(wrap) 100 ;# wrap plots? 
 set opt(srcTrace) is ;# where to plot traffic 
 set opt(dstTrace) bs2 ;# where to plot traffic 
 
 #default downlink bandwidth in bps 
 set bwDL(umts) 384000 
 
 
 #default downlink propagation delay in seconds 
 set propDL(umts) .150 
 
 
 set ns [new Simulator] 
 
 set tf [open Mlab6.tr w] 
 $ns trace-all $tf 
set nodes(is) [$ns node] 
 set nodes(ms) [$ns node] 
 set nodes(bs1) [$ns node] 
 set nodes(bs2) [$ns node] 
 set nodes(lp) [$ns node] 
 
 proc cell_topo {} { 
 global ns nodes 
 $ns duplex-link $nodes(lp) $nodes(bs1) 3Mbps 10ms DropTail 
 $ns duplex-link $nodes(bs1) $nodes(ms) 1 1 RED 
 $ns duplex-link $nodes(ms) $nodes(bs2) 1 1 RED 
 $ns duplex-link $nodes(bs2) $nodes(is) 3Mbps 50ms DropTail 
 puts " umts Cell Topology" 
 } 
 
 proc set_link_para {t} { 
 global ns nodes bwDL propDL 
 $ns bandwidth $nodes(bs1) $nodes(ms) $bwDL($t) duplex 
 $ns bandwidth $nodes(bs2) $nodes(ms) $bwDL($t) duplex 
 
 $ns delay $nodes(bs1) $nodes(ms) $propDL($t) duplex 
 $ns delay $nodes(bs2) $nodes(ms) $propDL($t) duplex 
 
 $ns queue-limit $nodes(bs1) $nodes(ms) 20 
 $ns queue-limit $nodes(bs2) $nodes(ms) 20 
 }
# RED and TCP parameters 
 Queue/RED set adaptive_ $adaptive 
 Queue/RED set thresh_ $minth 
 Queue/RED set maxthresh_ $maxth 
 Agent/TCP set window_ $window 
 
 #Create topology 
 switch $type { 
 umts {cell_topo} 
 } 
 
 
 set_link_para $type 
 $ns insert-delayer $nodes(ms) $nodes(bs1) [new Delayer] 
 $ns insert-delayer $nodes(ms) $nodes(bs2) [new Delayer] 
 
 # Set up forward TCP connection 
 if {$flows == 0} { 
 set tcp1 [$ns create-connection TCP/Sack1 $nodes(is) TCPSink/Sack1 $nodes(lp) 0] 
 set ftp1 [[set tcp1] attach-app FTP] 
 $ns at 0.8 "[set ftp1] start" 
 } 
 
 
 
 proc stop {} {
global nodes opt tf 
 set wrap $opt(wrap) 
 set sid [$nodes($opt(srcTrace)) id] 
 set did [$nodes($opt(dstTrace)) id] 
 
 set a "Mlab6.tr" 
 
 set GETRC "/var/cn/ns-allinone-2.35/ns-2.35/bin/getrc"
 set RAW2XG "/var/cn/ns-allinone-2.35/ns-2.35/bin/raw2xg"
 
 exec $GETRC -s $sid -d $did -f 0 Mlab6.tr | \
 $RAW2XG -s 0.01 -m $wrap -r > plot6.xgr
 
 exec $GETRC -s $did -d $sid -f 0 Mlab6.tr | \
 $RAW2XG -a -s 0.01 -m $wrap >> plot6.xgr
 
 exec xgraph -x time -y packets plot6.xgr & 
 exit 0 
 } 
 $ns at $stop "stop" 
$ns run
