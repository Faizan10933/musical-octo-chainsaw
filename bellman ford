import java.util.Scanner;
public class ford {
	private int D[];
	private int num_ver;
	public static final int MAX_VALUE=999;
	public ford(int num_ver)
	{
		this.num_ver=num_ver;
		D=new int[num_ver+1];
	}
	public void BellmanFordEvaluation(int source,int A[][])
	{
		for(int node=1;node<=num_ver;node++)
		{
			D[node]=MAX_VALUE;
		}
		D[source]=0;
		for(int node=1;node<=num_ver-1;node++)
		{
			for(int sn=1;sn<=num_ver;sn++)
			{
				for(int dn=1;dn<=num_ver;dn++)
				{
					if(A[sn][dn]!=MAX_VALUE)
					{
						if(D[dn]>D[sn]+A[sn][dn])
							D[dn]=D[sn]+A[sn][dn];
					}
				}
			}
		}
		for(int sn=1;sn<=num_ver;sn++)
		{
			for(int dn=1;dn<=num_ver;dn++)
			{
				if(A[sn][dn]!=MAX_VALUE)
				{
					if(D[dn]>D[sn]+A[sn][dn])
						System.out.println("the graph contains negative edge cycle");
				}
			}
		}
		for(int vertex=1;vertex<=num_ver;vertex++)
		{
			System.out.println("distance ofsource" +source+" to "+vertex+" is "+D[vertex]);
		}
	}
	public static void main(String[]args)
	{
		int num_ver=0;
		int source;
		Scanner scanner=new Scanner(System.in);
		System.out.println("Enter the number of vertices");
		num_ver=scanner.nextInt();
		int A[][]=new int[num_ver+1][num_ver+1];
		System.out.println("enter the adjacency matrix");
		for(int sn=1;sn<=num_ver;sn++)
		{
			for(int dn=1;dn<=num_ver;dn++)
			{
				A[sn][dn]=scanner.nextInt();
				if(sn==dn)
				{
					A[sn][dn]=0;
							continue;
				}
				if(A[sn][dn]==0)
				{
					A[sn][dn]=MAX_VALUE;
				}
			}
		}
		System.out.println("enter the source vertex");
		source=scanner.nextInt();
		ford b=new ford(num_ver);
		b.BellmanFordEvaluation(source,A);
		scanner.close();
	}
}
	




import java.io.*;
import java.net.*;
import java.util.*;

public class EchoClient
{
public static void main(String args[])
{
System.out.println("Echo Client");
try
{
InetAddress localhost=InetAddress.getLocalHost();
Socket socket=new Socket(localhost,8000);
PrintWriter out=new PrintWriter(socket.getOutputStream(),true);
BufferedReader buffer=new BufferedReader(new InputStreamReader(socket.getInputStream()));
System.out.println("WE r connected with server");
Scanner sc=new Scanner(System.in);
while(true)
{
System.out.println("please enter text");
String input=sc.nextLine();
if("exit".equalsIgnoreCase(input))
{
break;
}
out.println(input);
String response=buffer.readLine();
System.out.println("server reponse is :"+response);
}
}
catch(Exception e1)
{
e1.printStackTrace();
}


}
}





echo client


import java.io.*;
import java.net.*;
public class Echoclient {

	public static void main(String[] args)throws Exception
	{
		try
		{
		int port;
		BufferedReader Buf=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter the port Address:");
		port=Integer.parseInt(Buf.readLine());
		Socket sok=new Socket("local host",port);
		if(sok.isConnected()==true)
			System.out.println("server socket is connected successfully");
		InputStream in=sok.getInputStream();
		OutputStream ou=sok.getOutputStream();
		PrintWriter pr=new PrintWriter(ou);
		BufferedReader buf1=new BufferedReader(new InputStreamReader(System.in));
		BufferedReader buf2=new BufferedReader(new InputStreamReader(in));
		String str1,str2;
		System.out.println("enter the message:");
		str1=buf1.readLine();
		pr.println(str1);
		pr.flush();
		System.out.println("message send successfully.");
		str2=buf2.readLine();
		System.out.println("message from server:"+str2);
	}
	 catch(Exception e)
	{
		 System.out.println("error:"+e.getMessage());
	}
}
}
		
	

	
echo server



package SERVER;
import java.io.*;
import java.net.*;
public class EchoServer
{

	public static void main(String[] args) throws Exception
	{
		try
		{
			int port;
			BufferedReader Buf=new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter the port Address:");
			port=Integer.parseInt(Buf.readLine());
			ServerSocket sok=new ServerSocket(port);
			System.out.println("server is ready to receive a message.");
			System.out.println("waiting......");
			Socket so=sok.accept();
			if(so.isConnected()==true)
				System.out.println("client socket is connected successfully.");
			InputStream in=so.getInputStream();
			OutputStream ou=so.getOutputStream();
			PrintWriter pr=new PrintWriter(ou);
			BufferedReader buf=new BufferedReader(new InputStreamReader(in));
			String str=buf.readLine();
			System.out.println("message received from client:" +str);
			System.out.println("this message is forwarded to client.");
			pr.println(str);
			pr.flush();
		}
		 catch(Exception e)
		{
			 System.out.println("error:"+e.getMessage());
		}
	}
}
			
		


new echo server

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	






